// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2025 00:48:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tp2_e5_ERV25_grupo2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tp2_e5_ERV25_grupo2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] add_build_target;
wire [31:0] address_target;
wire branch_result;
wire [31:0] c;
wire [31:0] c_write_back;
wire [31:0] data_in;
wire dec_ena;
wire dec_nop;
wire fetch_ena;
wire [31:0] imm;
wire [31:0] imm_op;
wire [31:0] inst_in;
wire [2:0] instr_type;
wire [31:0] load_data;
wire [31:0] pc;
wire [31:0] pc_new;
wire [31:0] pc_next;
wire [31:0] pc_op;
wire rd_memory_wb;
wire [4:0] rd_write_back;
wire [31:0] rs1_data_ex;
wire [31:0] rs1_data_op;
wire [4:0] rs1_dec;
wire [4:0] rs1_op;
wire [31:0] rs2_data_ex;
wire [31:0] rs2_data_op;
wire [4:0] rs2_dec;
wire [4:0] rs2_op;
wire save_to_reg_write_back;
wire [31:0] store_data;
wire take_new_pc;
wire wr_memory_mem;

// assign statements (if any)                          
tp2_e5_ERV25_grupo2 i1 (
// port map - connection between master ports and signals/registers   
	.add_build_target(add_build_target),
	.address_target(address_target),
	.branch_result(branch_result),
	.c(c),
	.c_write_back(c_write_back),
	.clk(clk),
	.data_in(data_in),
	.dec_ena(dec_ena),
	.dec_nop(dec_nop),
	.fetch_ena(fetch_ena),
	.imm(imm),
	.imm_op(imm_op),
	.inst_in(inst_in),
	.instr_type(instr_type),
	.load_data(load_data),
	.pc(pc),
	.pc_new(pc_new),
	.pc_next(pc_next),
	.pc_op(pc_op),
	.rd_memory_wb(rd_memory_wb),
	.rd_write_back(rd_write_back),
	.reset(reset),
	.rs1_data_ex(rs1_data_ex),
	.rs1_data_op(rs1_data_op),
	.rs1_dec(rs1_dec),
	.rs1_op(rs1_op),
	.rs2_data_ex(rs2_data_ex),
	.rs2_data_op(rs2_data_op),
	.rs2_dec(rs2_dec),
	.rs2_op(rs2_op),
	.save_to_reg_write_back(save_to_reg_write_back),
	.store_data(store_data),
	.take_new_pc(take_new_pc),
	.wr_memory_mem(wr_memory_mem)
);
initial 
begin 
#10000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #30000 1'b0;
end 
endmodule

