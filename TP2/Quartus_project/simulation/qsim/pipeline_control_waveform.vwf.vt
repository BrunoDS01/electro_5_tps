// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2025 01:25:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pipeline_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipeline_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] rd_ex;
reg [4:0] rd_op;
reg rd_used_ex;
reg rd_used_op;
reg [4:0] rs1_dec;
reg rs1_used_dec;
reg [4:0] rs2_dec;
reg rs2_used_dec;
// wires                                               
wire dec_ena;
wire dec_nop;
wire ex_ena;
wire ex_nop;
wire fetch_ena;
wire fetch_nop;
wire mem_ena;
wire mem_nop;
wire op_ena;
wire op_nop;
wire wb_ena;
wire wb_nop;

// assign statements (if any)                          
pipeline_control i1 (
// port map - connection between master ports and signals/registers   
	.dec_ena(dec_ena),
	.dec_nop(dec_nop),
	.ex_ena(ex_ena),
	.ex_nop(ex_nop),
	.fetch_ena(fetch_ena),
	.fetch_nop(fetch_nop),
	.mem_ena(mem_ena),
	.mem_nop(mem_nop),
	.op_ena(op_ena),
	.op_nop(op_nop),
	.rd_ex(rd_ex),
	.rd_op(rd_op),
	.rd_used_ex(rd_used_ex),
	.rd_used_op(rd_used_op),
	.rs1_dec(rs1_dec),
	.rs1_used_dec(rs1_used_dec),
	.rs2_dec(rs2_dec),
	.rs2_used_dec(rs2_used_dec),
	.wb_ena(wb_ena),
	.wb_nop(wb_nop)
);
initial 
begin 
#1000000 $finish;
end 
// rd_ex[ 4 ]
initial
begin
	rd_ex[4] = 1'b0;
end 
// rd_ex[ 3 ]
initial
begin
	rd_ex[3] = 1'b0;
end 
// rd_ex[ 2 ]
initial
begin
	rd_ex[2] = 1'b0;
end 
// rd_ex[ 1 ]
initial
begin
	rd_ex[1] = 1'b0;
end 
// rd_ex[ 0 ]
initial
begin
	rd_ex[0] = 1'b0;
end 
// rd_op[ 4 ]
initial
begin
	rd_op[4] = 1'b0;
end 
// rd_op[ 3 ]
initial
begin
	rd_op[3] = 1'b0;
end 
// rd_op[ 2 ]
initial
begin
	rd_op[2] = 1'b0;
end 
// rd_op[ 1 ]
initial
begin
	rd_op[1] = 1'b0;
	rd_op[1] = #40000 1'b1;
	rd_op[1] = #40000 1'b0;
end 
// rd_op[ 0 ]
initial
begin
	rd_op[0] = 1'b0;
end 

// rd_used_ex
initial
begin
	rd_used_ex = 1'b0;
end 

// rd_used_op
initial
begin
	rd_used_op = 1'b0;
	rd_used_op = #40000 1'b1;
	rd_used_op = #40000 1'b0;
end 
// rs1_dec[ 4 ]
initial
begin
	rs1_dec[4] = 1'b0;
end 
// rs1_dec[ 3 ]
initial
begin
	rs1_dec[3] = 1'b0;
end 
// rs1_dec[ 2 ]
initial
begin
	rs1_dec[2] = 1'b0;
end 
// rs1_dec[ 1 ]
initial
begin
	rs1_dec[1] = 1'b0;
end 
// rs1_dec[ 0 ]
initial
begin
	rs1_dec[0] = 1'b0;
	rs1_dec[0] = #40000 1'b1;
	rs1_dec[0] = #40000 1'b0;
end 

// rs1_used_dec
initial
begin
	rs1_used_dec = 1'b0;
end 
// rs2_dec[ 4 ]
initial
begin
	rs2_dec[4] = 1'b0;
end 
// rs2_dec[ 3 ]
initial
begin
	rs2_dec[3] = 1'b0;
end 
// rs2_dec[ 2 ]
initial
begin
	rs2_dec[2] = 1'b0;
end 
// rs2_dec[ 1 ]
initial
begin
	rs2_dec[1] = 1'b0;
	rs2_dec[1] = #40000 1'b1;
	rs2_dec[1] = #30000 1'b0;
end 
// rs2_dec[ 0 ]
initial
begin
	rs2_dec[0] = 1'b0;
end 

// rs2_used_dec
initial
begin
	rs2_used_dec = 1'b0;
	rs2_used_dec = #40000 1'b1;
	rs2_used_dec = #30000 1'b0;
end 
endmodule

