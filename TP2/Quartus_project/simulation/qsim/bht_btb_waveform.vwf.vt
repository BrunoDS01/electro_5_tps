// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2025 11:03:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bht_btb_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bht_btb_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg increment_counter;
reg is_branch;
reg [31:0] pc_fetch;
reg [31:0] pc_fetch_update;
reg [31:0] pc_target_update;
reg [1:0] prev_counter;
reg prev_valid;
reg reset;
// wires                                               
wire branch_prediction;
wire [1:0] current_counter;
wire current_valid;
wire [31:0] pc_target_prediction;

// assign statements (if any)                          
bht_btb_module i1 (
// port map - connection between master ports and signals/registers   
	.branch_prediction(branch_prediction),
	.clk(clk),
	.current_counter(current_counter),
	.current_valid(current_valid),
	.increment_counter(increment_counter),
	.is_branch(is_branch),
	.pc_fetch(pc_fetch),
	.pc_fetch_update(pc_fetch_update),
	.pc_target_prediction(pc_target_prediction),
	.pc_target_update(pc_target_update),
	.prev_counter(prev_counter),
	.prev_valid(prev_valid),
	.reset(reset)
);
initial 
begin 
#2000000 $finish;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #70000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// pc_fetch[ 31 ]
initial
begin
	pc_fetch[31] = 1'b0;
end 
// pc_fetch[ 30 ]
initial
begin
	pc_fetch[30] = 1'b0;
end 
// pc_fetch[ 29 ]
initial
begin
	pc_fetch[29] = 1'b0;
end 
// pc_fetch[ 28 ]
initial
begin
	pc_fetch[28] = 1'b0;
end 
// pc_fetch[ 27 ]
initial
begin
	pc_fetch[27] = 1'b0;
end 
// pc_fetch[ 26 ]
initial
begin
	pc_fetch[26] = 1'b0;
end 
// pc_fetch[ 25 ]
initial
begin
	pc_fetch[25] = 1'b0;
end 
// pc_fetch[ 24 ]
initial
begin
	pc_fetch[24] = 1'b0;
end 
// pc_fetch[ 23 ]
initial
begin
	pc_fetch[23] = 1'b0;
end 
// pc_fetch[ 22 ]
initial
begin
	pc_fetch[22] = 1'b0;
end 
// pc_fetch[ 21 ]
initial
begin
	pc_fetch[21] = 1'b0;
end 
// pc_fetch[ 20 ]
initial
begin
	pc_fetch[20] = 1'b0;
end 
// pc_fetch[ 19 ]
initial
begin
	pc_fetch[19] = 1'b0;
end 
// pc_fetch[ 18 ]
initial
begin
	pc_fetch[18] = 1'b0;
end 
// pc_fetch[ 17 ]
initial
begin
	pc_fetch[17] = 1'b0;
end 
// pc_fetch[ 16 ]
initial
begin
	pc_fetch[16] = 1'b0;
end 
// pc_fetch[ 15 ]
initial
begin
	pc_fetch[15] = 1'b0;
end 
// pc_fetch[ 14 ]
initial
begin
	pc_fetch[14] = 1'b0;
end 
// pc_fetch[ 13 ]
initial
begin
	pc_fetch[13] = 1'b0;
end 
// pc_fetch[ 12 ]
initial
begin
	pc_fetch[12] = 1'b0;
end 
// pc_fetch[ 11 ]
initial
begin
	pc_fetch[11] = 1'b0;
end 
// pc_fetch[ 10 ]
initial
begin
	pc_fetch[10] = 1'b0;
end 
// pc_fetch[ 9 ]
initial
begin
	pc_fetch[9] = 1'b0;
end 
// pc_fetch[ 8 ]
initial
begin
	pc_fetch[8] = 1'b0;
end 
// pc_fetch[ 7 ]
initial
begin
	pc_fetch[7] = 1'b0;
end 
// pc_fetch[ 6 ]
initial
begin
	pc_fetch[6] = 1'b0;
end 
// pc_fetch[ 5 ]
initial
begin
	pc_fetch[5] = 1'b0;
end 
// pc_fetch[ 4 ]
initial
begin
	pc_fetch[4] = 1'b0;
end 
// pc_fetch[ 3 ]
initial
begin
	pc_fetch[3] = 1'b0;
	pc_fetch[3] = #120000 1'b1;
	pc_fetch[3] = #60000 1'b0;
	pc_fetch[3] = #60000 1'b1;
	pc_fetch[3] = #20000 1'b0;
	pc_fetch[3] = #80000 1'b1;
	pc_fetch[3] = #40000 1'b0;
	pc_fetch[3] = #140000 1'b1;
	pc_fetch[3] = #60000 1'b0;
	pc_fetch[3] = #160000 1'b1;
	pc_fetch[3] = #30000 1'b0;
	pc_fetch[3] = #160000 1'b1;
	pc_fetch[3] = #30000 1'b0;
	pc_fetch[3] = #70000 1'b1;
	pc_fetch[3] = #30000 1'b0;
	pc_fetch[3] = #80000 1'b1;
	pc_fetch[3] = #30000 1'b0;
end 
// pc_fetch[ 2 ]
initial
begin
	pc_fetch[2] = 1'b0;
end 
// pc_fetch[ 1 ]
initial
begin
	pc_fetch[1] = 1'b0;
	pc_fetch[1] = #120000 1'b1;
	pc_fetch[1] = #60000 1'b0;
	pc_fetch[1] = #60000 1'b1;
	pc_fetch[1] = #20000 1'b0;
	pc_fetch[1] = #80000 1'b1;
	pc_fetch[1] = #40000 1'b0;
	pc_fetch[1] = #140000 1'b1;
	pc_fetch[1] = #60000 1'b0;
	pc_fetch[1] = #160000 1'b1;
	pc_fetch[1] = #30000 1'b0;
	pc_fetch[1] = #160000 1'b1;
	pc_fetch[1] = #30000 1'b0;
	pc_fetch[1] = #70000 1'b1;
	pc_fetch[1] = #30000 1'b0;
	pc_fetch[1] = #80000 1'b1;
	pc_fetch[1] = #30000 1'b0;
end 
// pc_fetch[ 0 ]
initial
begin
	pc_fetch[0] = 1'b0;
end 

// is_branch
initial
begin
	is_branch = 1'b0;
	is_branch = #130000 1'b1;
	is_branch = #30000 1'b0;
	is_branch = #60000 1'b1;
	is_branch = #60000 1'b0;
	is_branch = #140000 1'b1;
	is_branch = #60000 1'b0;
	is_branch = #160000 1'b1;
	is_branch = #30000 1'b0;
	is_branch = #160000 1'b1;
	is_branch = #30000 1'b0;
	is_branch = #70000 1'b1;
	is_branch = #40000 1'b0;
	is_branch = #60000 1'b1;
	is_branch = #30000 1'b0;
end 

// prev_valid
initial
begin
	prev_valid = 1'b0;
	prev_valid = #220000 1'b1;
	prev_valid = #60000 1'b0;
	prev_valid = #140000 1'b1;
	prev_valid = #60000 1'b0;
	prev_valid = #160000 1'b1;
	prev_valid = #30000 1'b0;
	prev_valid = #160000 1'b1;
	prev_valid = #30000 1'b0;
	prev_valid = #70000 1'b1;
	prev_valid = #40000 1'b0;
	prev_valid = #50000 1'b1;
	prev_valid = #40000 1'b0;
end 
// prev_counter[ 1 ]
initial
begin
	prev_counter[1] = 1'b0;
	prev_counter[1] = #640000 1'b1;
	prev_counter[1] = #30000 1'b0;
	prev_counter[1] = #260000 1'b1;
	prev_counter[1] = #40000 1'b0;
	prev_counter[1] = #50000 1'b1;
	prev_counter[1] = #40000 1'b0;
end 
// prev_counter[ 0 ]
initial
begin
	prev_counter[0] = 1'b0;
	prev_counter[0] = #420000 1'b1;
	prev_counter[0] = #60000 1'b0;
	prev_counter[0] = #350000 1'b1;
	prev_counter[0] = #30000 1'b0;
	prev_counter[0] = #160000 1'b1;
	prev_counter[0] = #40000 1'b0;
end 

// increment_counter
initial
begin
	increment_counter = 1'b0;
	increment_counter = #220000 1'b1;
	increment_counter = #60000 1'b0;
	increment_counter = #140000 1'b1;
	increment_counter = #60000 1'b0;
	increment_counter = #350000 1'b1;
	increment_counter = #30000 1'b0;
	increment_counter = #70000 1'b1;
	increment_counter = #40000 1'b0;
	increment_counter = #50000 1'b1;
	increment_counter = #40000 1'b0;
end 
// pc_fetch_update[ 31 ]
initial
begin
	pc_fetch_update[31] = 1'b0;
end 
// pc_fetch_update[ 30 ]
initial
begin
	pc_fetch_update[30] = 1'b0;
end 
// pc_fetch_update[ 29 ]
initial
begin
	pc_fetch_update[29] = 1'b0;
end 
// pc_fetch_update[ 28 ]
initial
begin
	pc_fetch_update[28] = 1'b0;
end 
// pc_fetch_update[ 27 ]
initial
begin
	pc_fetch_update[27] = 1'b0;
end 
// pc_fetch_update[ 26 ]
initial
begin
	pc_fetch_update[26] = 1'b0;
end 
// pc_fetch_update[ 25 ]
initial
begin
	pc_fetch_update[25] = 1'b0;
end 
// pc_fetch_update[ 24 ]
initial
begin
	pc_fetch_update[24] = 1'b0;
end 
// pc_fetch_update[ 23 ]
initial
begin
	pc_fetch_update[23] = 1'b0;
end 
// pc_fetch_update[ 22 ]
initial
begin
	pc_fetch_update[22] = 1'b0;
end 
// pc_fetch_update[ 21 ]
initial
begin
	pc_fetch_update[21] = 1'b0;
end 
// pc_fetch_update[ 20 ]
initial
begin
	pc_fetch_update[20] = 1'b0;
end 
// pc_fetch_update[ 19 ]
initial
begin
	pc_fetch_update[19] = 1'b0;
end 
// pc_fetch_update[ 18 ]
initial
begin
	pc_fetch_update[18] = 1'b0;
end 
// pc_fetch_update[ 17 ]
initial
begin
	pc_fetch_update[17] = 1'b0;
end 
// pc_fetch_update[ 16 ]
initial
begin
	pc_fetch_update[16] = 1'b0;
end 
// pc_fetch_update[ 15 ]
initial
begin
	pc_fetch_update[15] = 1'b0;
end 
// pc_fetch_update[ 14 ]
initial
begin
	pc_fetch_update[14] = 1'b0;
end 
// pc_fetch_update[ 13 ]
initial
begin
	pc_fetch_update[13] = 1'b0;
end 
// pc_fetch_update[ 12 ]
initial
begin
	pc_fetch_update[12] = 1'b0;
end 
// pc_fetch_update[ 11 ]
initial
begin
	pc_fetch_update[11] = 1'b0;
end 
// pc_fetch_update[ 10 ]
initial
begin
	pc_fetch_update[10] = 1'b0;
end 
// pc_fetch_update[ 9 ]
initial
begin
	pc_fetch_update[9] = 1'b0;
end 
// pc_fetch_update[ 8 ]
initial
begin
	pc_fetch_update[8] = 1'b0;
end 
// pc_fetch_update[ 7 ]
initial
begin
	pc_fetch_update[7] = 1'b0;
end 
// pc_fetch_update[ 6 ]
initial
begin
	pc_fetch_update[6] = 1'b0;
end 
// pc_fetch_update[ 5 ]
initial
begin
	pc_fetch_update[5] = 1'b0;
end 
// pc_fetch_update[ 4 ]
initial
begin
	pc_fetch_update[4] = 1'b0;
end 
// pc_fetch_update[ 3 ]
initial
begin
	pc_fetch_update[3] = 1'b0;
	pc_fetch_update[3] = #120000 1'b1;
	pc_fetch_update[3] = #40000 1'b0;
	pc_fetch_update[3] = #60000 1'b1;
	pc_fetch_update[3] = #60000 1'b0;
	pc_fetch_update[3] = #140000 1'b1;
	pc_fetch_update[3] = #60000 1'b0;
	pc_fetch_update[3] = #160000 1'b1;
	pc_fetch_update[3] = #30000 1'b0;
	pc_fetch_update[3] = #160000 1'b1;
	pc_fetch_update[3] = #30000 1'b0;
	pc_fetch_update[3] = #70000 1'b1;
	pc_fetch_update[3] = #40000 1'b0;
	pc_fetch_update[3] = #50000 1'b1;
	pc_fetch_update[3] = #40000 1'b0;
end 
// pc_fetch_update[ 2 ]
initial
begin
	pc_fetch_update[2] = 1'b0;
end 
// pc_fetch_update[ 1 ]
initial
begin
	pc_fetch_update[1] = 1'b0;
	pc_fetch_update[1] = #120000 1'b1;
	pc_fetch_update[1] = #40000 1'b0;
	pc_fetch_update[1] = #60000 1'b1;
	pc_fetch_update[1] = #60000 1'b0;
	pc_fetch_update[1] = #140000 1'b1;
	pc_fetch_update[1] = #60000 1'b0;
	pc_fetch_update[1] = #160000 1'b1;
	pc_fetch_update[1] = #30000 1'b0;
	pc_fetch_update[1] = #160000 1'b1;
	pc_fetch_update[1] = #30000 1'b0;
	pc_fetch_update[1] = #70000 1'b1;
	pc_fetch_update[1] = #40000 1'b0;
	pc_fetch_update[1] = #50000 1'b1;
	pc_fetch_update[1] = #40000 1'b0;
end 
// pc_fetch_update[ 0 ]
initial
begin
	pc_fetch_update[0] = 1'b0;
end 
// pc_target_update[ 31 ]
initial
begin
	pc_target_update[31] = 1'b0;
end 
// pc_target_update[ 30 ]
initial
begin
	pc_target_update[30] = 1'b0;
end 
// pc_target_update[ 29 ]
initial
begin
	pc_target_update[29] = 1'b0;
end 
// pc_target_update[ 28 ]
initial
begin
	pc_target_update[28] = 1'b0;
end 
// pc_target_update[ 27 ]
initial
begin
	pc_target_update[27] = 1'b0;
end 
// pc_target_update[ 26 ]
initial
begin
	pc_target_update[26] = 1'b0;
end 
// pc_target_update[ 25 ]
initial
begin
	pc_target_update[25] = 1'b0;
end 
// pc_target_update[ 24 ]
initial
begin
	pc_target_update[24] = 1'b0;
end 
// pc_target_update[ 23 ]
initial
begin
	pc_target_update[23] = 1'b0;
end 
// pc_target_update[ 22 ]
initial
begin
	pc_target_update[22] = 1'b0;
end 
// pc_target_update[ 21 ]
initial
begin
	pc_target_update[21] = 1'b0;
end 
// pc_target_update[ 20 ]
initial
begin
	pc_target_update[20] = 1'b0;
end 
// pc_target_update[ 19 ]
initial
begin
	pc_target_update[19] = 1'b0;
end 
// pc_target_update[ 18 ]
initial
begin
	pc_target_update[18] = 1'b0;
end 
// pc_target_update[ 17 ]
initial
begin
	pc_target_update[17] = 1'b0;
end 
// pc_target_update[ 16 ]
initial
begin
	pc_target_update[16] = 1'b0;
end 
// pc_target_update[ 15 ]
initial
begin
	pc_target_update[15] = 1'b0;
end 
// pc_target_update[ 14 ]
initial
begin
	pc_target_update[14] = 1'b0;
end 
// pc_target_update[ 13 ]
initial
begin
	pc_target_update[13] = 1'b0;
end 
// pc_target_update[ 12 ]
initial
begin
	pc_target_update[12] = 1'b0;
end 
// pc_target_update[ 11 ]
initial
begin
	pc_target_update[11] = 1'b0;
end 
// pc_target_update[ 10 ]
initial
begin
	pc_target_update[10] = 1'b0;
end 
// pc_target_update[ 9 ]
initial
begin
	pc_target_update[9] = 1'b0;
end 
// pc_target_update[ 8 ]
initial
begin
	pc_target_update[8] = 1'b0;
end 
// pc_target_update[ 7 ]
initial
begin
	pc_target_update[7] = 1'b0;
end 
// pc_target_update[ 6 ]
initial
begin
	pc_target_update[6] = 1'b0;
end 
// pc_target_update[ 5 ]
initial
begin
	pc_target_update[5] = 1'b0;
	pc_target_update[5] = #120000 1'b1;
	pc_target_update[5] = #40000 1'b0;
	pc_target_update[5] = #60000 1'b1;
	pc_target_update[5] = #60000 1'b0;
	pc_target_update[5] = #140000 1'b1;
	pc_target_update[5] = #60000 1'b0;
end 
// pc_target_update[ 4 ]
initial
begin
	pc_target_update[4] = 1'b0;
	pc_target_update[4] = #120000 1'b1;
	pc_target_update[4] = #40000 1'b0;
	pc_target_update[4] = #60000 1'b1;
	pc_target_update[4] = #60000 1'b0;
	pc_target_update[4] = #140000 1'b1;
	pc_target_update[4] = #60000 1'b0;
	pc_target_update[4] = #160000 1'b1;
	pc_target_update[4] = #30000 1'b0;
	pc_target_update[4] = #160000 1'b1;
	pc_target_update[4] = #30000 1'b0;
	pc_target_update[4] = #70000 1'b1;
	pc_target_update[4] = #40000 1'b0;
	pc_target_update[4] = #50000 1'b1;
	pc_target_update[4] = #40000 1'b0;
end 
// pc_target_update[ 3 ]
initial
begin
	pc_target_update[3] = 1'b0;
	pc_target_update[3] = #120000 1'b1;
	pc_target_update[3] = #40000 1'b0;
	pc_target_update[3] = #60000 1'b1;
	pc_target_update[3] = #60000 1'b0;
	pc_target_update[3] = #140000 1'b1;
	pc_target_update[3] = #60000 1'b0;
end 
// pc_target_update[ 2 ]
initial
begin
	pc_target_update[2] = 1'b0;
	pc_target_update[2] = #640000 1'b1;
	pc_target_update[2] = #30000 1'b0;
	pc_target_update[2] = #160000 1'b1;
	pc_target_update[2] = #30000 1'b0;
	pc_target_update[2] = #70000 1'b1;
	pc_target_update[2] = #40000 1'b0;
	pc_target_update[2] = #50000 1'b1;
	pc_target_update[2] = #40000 1'b0;
end 
// pc_target_update[ 1 ]
initial
begin
	pc_target_update[1] = 1'b0;
	pc_target_update[1] = #120000 1'b1;
	pc_target_update[1] = #40000 1'b0;
	pc_target_update[1] = #60000 1'b1;
	pc_target_update[1] = #60000 1'b0;
	pc_target_update[1] = #140000 1'b1;
	pc_target_update[1] = #60000 1'b0;
	pc_target_update[1] = #160000 1'b1;
	pc_target_update[1] = #30000 1'b0;
	pc_target_update[1] = #160000 1'b1;
	pc_target_update[1] = #30000 1'b0;
	pc_target_update[1] = #70000 1'b1;
	pc_target_update[1] = #40000 1'b0;
	pc_target_update[1] = #50000 1'b1;
	pc_target_update[1] = #40000 1'b0;
end 
// pc_target_update[ 0 ]
initial
begin
	pc_target_update[0] = 1'b0;
	pc_target_update[0] = #640000 1'b1;
	pc_target_update[0] = #30000 1'b0;
	pc_target_update[0] = #160000 1'b1;
	pc_target_update[0] = #30000 1'b0;
	pc_target_update[0] = #70000 1'b1;
	pc_target_update[0] = #40000 1'b0;
	pc_target_update[0] = #50000 1'b1;
	pc_target_update[0] = #40000 1'b0;
end 
endmodule

