// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/08/2025 17:08:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tp2_e5_ERV25_grupo2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tp2_e5_ERV25_grupo2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [5:0] rd_address;
reg update_counter;
reg [5:0] wr_address;
reg wr_ena;
// wires                                               
wire prediction;

// assign statements (if any)                          
tp2_e5_ERV25_grupo2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.prediction(prediction),
	.rd_address(rd_address),
	.update_counter(update_counter),
	.wr_address(wr_address),
	.wr_ena(wr_ena)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// rd_address[ 5 ]
initial
begin
	rd_address[5] = 1'b0;
end 
// rd_address[ 4 ]
initial
begin
	rd_address[4] = 1'b0;
end 
// rd_address[ 3 ]
initial
begin
	rd_address[3] = 1'b0;
	rd_address[3] = #20000 1'b1;
	rd_address[3] = #110000 1'b0;
	rd_address[3] = #310000 1'b1;
end 
// rd_address[ 2 ]
initial
begin
	rd_address[2] = 1'b0;
end 
// rd_address[ 1 ]
initial
begin
	rd_address[1] = 1'b0;
	rd_address[1] = #20000 1'b1;
	rd_address[1] = #110000 1'b0;
	rd_address[1] = #310000 1'b1;
end 
// rd_address[ 0 ]
initial
begin
	rd_address[0] = 1'b0;
end 

// update_counter
initial
begin
	update_counter = 1'b0;
	update_counter = #210000 1'b1;
	update_counter = #50000 1'b0;
	update_counter = #60000 1'b1;
	update_counter = #50000 1'b0;
end 
// wr_address[ 5 ]
initial
begin
	wr_address[5] = 1'b0;
end 
// wr_address[ 4 ]
initial
begin
	wr_address[4] = 1'b0;
end 
// wr_address[ 3 ]
initial
begin
	wr_address[3] = 1'b0;
	wr_address[3] = #210000 1'b1;
	wr_address[3] = #50000 1'b0;
	wr_address[3] = #60000 1'b1;
	wr_address[3] = #50000 1'b0;
end 
// wr_address[ 2 ]
initial
begin
	wr_address[2] = 1'b0;
end 
// wr_address[ 1 ]
initial
begin
	wr_address[1] = 1'b0;
	wr_address[1] = #210000 1'b1;
	wr_address[1] = #50000 1'b0;
	wr_address[1] = #60000 1'b1;
	wr_address[1] = #50000 1'b0;
end 
// wr_address[ 0 ]
initial
begin
	wr_address[0] = 1'b0;
end 

// wr_ena
initial
begin
	wr_ena = 1'b0;
	wr_ena = #210000 1'b1;
	wr_ena = #50000 1'b0;
	wr_ena = #60000 1'b1;
	wr_ena = #50000 1'b0;
end 
endmodule

